variables: &variables
  DEBIAN_FRONTEND: noninteractive
  DOCKER_HOST: tcp://docker:2375
  # Build parameters. We later override them at job level if needed.
  SONAR_SCANNER: "OFF"
  COVERALLS: "OFF"
  RUN_TESTS: "ON"
  STOCK_CPPZMQ: "ON"
  CMAKE_BUILD_TYPE: "Debug"
  BUILD_SHARED_LIBS: "ON"
  TANGO_CXX_STANDARD: "11"

services:
  - docker:20.10.1-dind

# See: https://docs.gitlab.com/ce/ci/yaml/README.html#workflowrules-templates
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "9.3-backports"

.job-template: &job-template
  image: debian:10
  before_script:
    - ulimit -c unlimited
    - echo "core.%e.%p.%t" > /proc/sys/kernel/core_pattern
    - apt-get update && apt-get install -y git wget unzip docker.io

    - docker pull tangocs/mysql:9.2.2
    - docker pull tangocs/tango-cs:latest
    - git clone https://github.com/JoakimSoderberg/coveralls-cmake.git
    - (test ${STOCK_CPPZMQ} = "OFF" && git clone -b v4.2.2 https://${CI_USER_TOKEN}@github.com/zeromq/cppzmq.git cppzmq) || mkdir cppzmq
    - git clone https://gitlab.com/tango-controls/tango-idl.git idl
    - wget https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip && unzip build-wrapper-linux-x86.zip

    - docker run --name mysql_db -e MYSQL_ROOT_PASSWORD=root -d tangocs/mysql:9.2.2 --sql-mode=""
    - CONTAINER=$(docker run --name tango_cs -e TANGO_HOST=127.0.0.1:10000 -e MYSQL_HOST=mysql_db:3306 -e MYSQL_USER=tango -e MYSQL_PASSWORD=tango -e MYSQL_DATABASE=tango --link mysql_db:mysql_db -d tangocs/tango-cs:latest)
    - IPADDR=$(docker inspect -f '{{ .NetworkSettings.IPAddress }}' $CONTAINER)
    - TANGO_HOST=${IPADDR}:10000
    - docker build -t cpp_tango .travis/${OS_TYPE}
    - docker run --name cpp_tango --user root -e TANGO_HOST=${TANGO_HOST} -e BINTRAY_USER_NAME=tango-ci -e BINTRAY_API_KEY=${CI_BINTRAY_API_KEY} -e COVERALLS_REPO_TOKEN=${COVERALLS_REPO_TOKEN} --link tango_cs:tango_cs -v `pwd`:/home/tango/src -v `pwd`/idl:/home/tango/idl -v `pwd`/cppzmq:/home/tango/cppzmq -v `pwd`/coveralls-cmake:/home/tango/coveralls-cmake -v `pwd`/build-wrapper-linux-x86:/home/tango/build-wrapper-linux-x86 -dit cpp_tango
    - .travis/install_tango_idl.sh
    - (test ${STOCK_CPPZMQ} = "OFF" && .travis/install_cppzmq.sh) || true
    #work around gcov ignored by sonar
    # - sudo mkdir /home/tango && sudo mkdir /home/tango/src && sudo mount --bind `pwd` /home/tango/src
  script:
    - .travis/run.sh
    - .travis/test.sh COVERALLS=OFF
    - test ${SONAR_SCANNER} = "ON" && .travis/sonar.sh || true
  after_script:
    - docker stop cpp_tango
    - docker rm cpp_tango
    - docker stop tango_cs
    - docker rm tango_cs
    - docker stop mysql_db
    - docker rm mysql_db
    - find build -name 'core.*' -exec gzip "{}" \;
  artifacts:
    when: always
    paths:
      - build/cpp_test_suite/*/core.*

debian10-release:
  <<: *job-template
  variables:
    <<: *variables
    OS_TYPE: debian10
    CMAKE_BUILD_TYPE: Release

debian10:
  <<: *job-template
  variables:
    <<: *variables
    TANGO_ENABLE_COVERAGE: "ON"
    OS_TYPE: debian10
  after_script:
    - find build -name 'core.*' -exec gzip "{}" \;
    - mkdir coverage
    - >
        docker exec --workdir /home/tango/src cpp_tango
        gcovr --filter '^cppapi/' --filter '^log4tango/(?!tests/)' -j$(nproc)
        --xml --output coverage.xml
    - >
        docker exec --workdir /home/tango/src cpp_tango
        gcovr --filter '^cppapi/' --filter '^log4tango/(?!tests/)' -j$(nproc)
        --html-details --output coverage/coverage.html
    - >
        docker exec --workdir /home/tango/src cpp_tango
        gcovr --filter '^cppapi/' --filter '^log4tango/(?!tests/)' -j$(nproc)
    - tar czf coverage.tar.gz coverage
    - docker stop cpp_tango
    - docker rm cpp_tango
    - docker stop tango_cs
    - docker rm tango_cs
    - docker stop mysql_db
    - docker rm mysql_db
  artifacts:
    when: always
    reports:
      coverage_report:
        # coverage report provides line-by-line info
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - build/cpp_test_suite/*/core.*.gz
      - coverage.xml
      - coverage.tar.gz
  # keyword/regex to extract total coverage % for this CI job
  coverage: '/^TOTAL.*\s+(\d+\%)$/'

debian10-static:
  <<: *job-template
  variables:
    <<: *variables
    OS_TYPE: debian10
    RUN_TESTS: "OFF"
    BUILD_SHARED_LIBS: "OFF"

debian10-Cxx98:
  <<: *job-template
  variables:
    <<: *variables
    OS_TYPE: debian10
    RUN_TESTS: "OFF"
    TANGO_CXX_STANDARD: "98"

debian9:
  <<: *job-template
  variables:
    <<: *variables
    OS_TYPE: debian9

debian8:
  <<: *job-template
  variables:
    <<: *variables
    OS_TYPE: debian8
    # SONAR_SCANNER: "ON"
    # COVERALLS: "ON"
    STOCK_CPPZMQ: "OFF"

debian7:
  <<: *job-template
  variables:
    <<: *variables
    OS_TYPE: debian7

alpine:
  image: alpine:3.13
  services: []
  before_script:
    - apk update
    - >
      apk add
      g++
      cmake
      curl
      git
      python2-dev
      python2
      libzmq
      make
      zeromq-dev
    # Install tango-idl
    - git clone --depth 1 https://gitlab.com/tango-controls/tango-idl.git /idl
    - cmake -B /idl/build -DCMAKE_INSTALL_PREFIX=/usr/local/tango-idl /idl
    - make -C /idl/build install
    # Install cppzmq
    - git clone -b v4.2.3 --depth 1 https://github.com/zeromq/cppzmq.git /cppzmq
    - export PKG_CONFIG_PATH=/usr/local/zmq/lib/pkgconfig
    - cmake -B /cppzmq/build -DCMAKE_INSTALL_PREFIX=/usr/local/cppzmq /cppzmq
    - make -C /cppzmq/build install
    # Install omniORB
    - curl -L https://sourceforge.net/projects/omniorb/files/omniORB/omniORB-4.2.4/omniORB-4.2.4.tar.bz2/download -o /omniORB.tar.bz2
    - mkdir /omniORB
    - tar xaf /omniORB.tar.bz2 --strip-components=1 -C /omniORB
    - cd /omniORB
    - ./configure --prefix=/usr/local/omniORB
    - make
    - make install
    - cd $CI_PROJECT_DIR
    - mkdir build
  script:
    - >
      cmake . -B build
      -DCMAKE_BUILD_TYPE=Debug
      -DBUILD_TESTING=ON
      -DCPPZMQ_BASE=/usr/local/cppzmq
      -DIDL_BASE=/usr/local/tango-idl
      -DOMNI_BASE=/usr/local/omniORB
      -DZMQ_BASE=/usr/local/zmq
    - make -C build

doxygen-documentation:
  image: debian:bullseye
  services: []
  before_script:
    - apt-get update
    - >
      apt-get install -y
      build-essential
      cmake
      doxygen
      git
      graphviz
      libcos4-dev
      libomniorb4-dev
      libomnithread4-dev
      libzmq3-dev
      omniidl
      pkg-config
    # Install tango-idl
    - git clone --depth 1 https://gitlab.com/tango-controls/tango-idl.git /idl
    - cmake -B /idl/build -DCMAKE_INSTALL_PREFIX=/usr/local/tango-idl /idl
    - make -C /idl/build install
    - mkdir build
  script:
    - >
      cmake . -B build
      -DCMAKE_BUILD_TYPE=Debug
      -DBUILD_TESTING=OFF
      -DIDL_BASE=/usr/local/tango-idl
    - make -C build doc
  artifacts:
    when: always
    paths:
      - build/doc_html

pages:
  image: debian:buster
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_BRANCH == "9.3-backports"'
      when: on_success
  needs:
    - doxygen-documentation
  script:
    - mv build/doc_html public
  artifacts:
    paths:
      - public
