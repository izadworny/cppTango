/*----- PROTECTED REGION ID(FwdTest::ClassFactory.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        ClassFactory.cpp
//
// description : C++ source for the class_factory method of the DServer
//               device class. This method is responsible for the creation of
//               all class singleton for a device server. It is called
//               at device server startup.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================
#ifndef DSERVER_IMPL_H
#define DSERVER_IMPL_H

#include <tango.h>
#include "FwdTestClass.h"

namespace FwdTest_ns
{

class DServerImpl : public Tango::DServer
{
        public:
        DServerImpl(Tango::DeviceClass* cl_ptr, const std::string& name, const std::string& desc, Tango::DevState state, const std::string& status):
            DServer(cl_ptr, name.c_str(), desc.c_str(), state, status.c_str())
            {}
private:
    void class_factory()
    {
        add_class(FwdTestClass::init("FwdTest"));
    }
};

inline Tango::DServer* constructor(Tango::DeviceClass* cl_ptr, const std::string& name, const std::string& desc, Tango::DevState state, const std::string& status)
{
        return new DServerImpl(cl_ptr, name, desc, state, status);
}
}
#endif
/*----- PROTECTED REGION END -----*/	//	FwdTest::ClassFactory.cpp
